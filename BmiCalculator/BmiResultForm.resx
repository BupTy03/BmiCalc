<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAE0GAABNBgAAAAAAAAAA
        AABZTC4AWUwuAFlMLgBZTC4AWUwuAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAFhLLgBZTC4AWUwuAFlMLgFURiwAWU0uAFlMLgJbTi8BWk0vAVlM
        LgJZTC4AWUwuAFFDIwJQQiEAVEcnTVdKLKpYSy2mWEssplhLLaZYSy2mWEstplhLLaZYSy2mWEstplhL
        LaZYSy2mWEstplhLLaZYSy2mWEstplhLLaZYSyymWUwupVlMLqxWSSp4XlM2A1xQMwBQQycEPjEXAEQ3
        HC9DNhw3QTQaAEM2HAJbTjAAOSkCADgoABNmWkDtlo+D/5yVi/6blIr/m5SK/5uUiv+blIr/m5SK/5uU
        iv+blIr/m5SK/5uUiv+blIr/m5SK/5uUiv+blIr/m5SK/5yVi/+Wj4P/hn5s/GtgR/9RRCNTT0EfAAAA
        AAArHggqaVw76nBjQfRENxw2QDMZAFdKLAI1JQAAMSAAIHRpU/mrpqD9fHNf+3ZrVvt3bVj7d21Y+3dt
        WPt3bVj7d21Y+3dtWPt3bVj7d21Y+3dtWPt3bVj7d21Y+3dtWPt3bFf7eG5Z+3FmT/uIgG73enBc/09B
        IWxAMREANCUGL2JVNOfi16P/2M6b/1hLLeFUSCsLOiwUADYmAAAtHAAfdmxW+pGIe/9mWkL+h39z/4N6
        bP+De23/g3tt/4N7bf+De23/g3tt/4N7bf+De23/g3tt/4N7bf+De23/g3ps/4R8bv+Ad2j/Z1xE/3Bl
        Tft5b1r/UEIhYEg6GBloXULqeW5Q/8/DkPqIfFb/TD8jZTgrEgBhVDUCNiYAAC0cACB2bFf7kIh6/3Jo
        VP6alI7/lI2F/5WPh/+Vj4f/lY+H/5WPh/+Vj4f/lY+H/5WPh/+Vj4f/lY+H/5WOh/+Vj4f/lY6G/4d/
        cv9zaVb/cGVN/XxyXv9RRCOUT0Eg1tHNxP/Z19H5U0Yo/0w/I2JTRiYAV0osAjYqEgA2JgAALRwAIHZs
        V/uQiHv/cGVQ/paQiP+RiYD/koqB/5KKgf+SioH/koqB/5KKgf+SioH/koqB/5KKgf+SioH/kYqB/5OM
        g/+IgHT/f3Zm/3FnUv91a1T/g3po/1tPMv55b138iYBr+4h/aP9OQCBiTD0bAGBTNQVURyoAV0ksADYm
        AAAtHAAgdmxX+5CIev9wZlH+l5CJ/5GKgf+Si4L/kouC/5KLgv+Si4L/kouC/5KLgv+Si4L/kouC/5KL
        gv+SjIP/kIl//392Zv+Ad2f/dWtY/2hcQv9pXkX/j4d8/KGblfteUTb/PzANZD8vCQBWSCkFQzUWAFdK
        LABZTC4ANiYAAC0cACB2bFf7kIh6/3BmUf6XkIn/kYqB/5KLgv+Si4L/kouC/5KLgv+Si4L/kouC/5KL
        gv+Si4L/kouC/5ONhP+GfnD/fHJh/4J6a/9yaFP/Wk0v/5CIfP+el5H9aFxD/1NGJmU9LQcAU0YmBWld
        QgBYSiwAWUwuAAAAAAA2JgAALRwAIHZsV/uQiHr/cGZR/peQif+RioH/kouC/5KLgv+Si4L/kouC/5KL
        gv+Si4L/kouC/5KLgv+TjIP/joZ8/31zY/+BeWr/dmxZ/2BTN/+RiX7/n5iS/mldRf9NPx1lRTYRAFdK
        LAVXSSsAWEosAFlMLgAAAAAAAAAAADYmAAAtHAAgdmxX+5CIev9wZlH+l5CJ/5GKgf+Si4L/kouC/5KL
        gv+Si4L/kouC/5KLgv+Si4L/kouC/5OMg/+CeWr/gXhp/3dtWv9eUjb/kIh9/56XkftmWkH/UUMihk0+
        HABYSiwGWEosAFlLLgBZTC4AAAAAAAAAAAAAAAAANiYAAC0cACB2bFf7kIh6/3BmUf6XkIn/kYqB/5KL
        gv+Si4L/kouC/5KLgv+Si4L/kouC/5KLgf+TjYT/iYJ2/4F4af90alf/XVE1/5OMgf+dlpD/bWJL+2hc
        Qv9ZTC5oVkkqAFpNLwRZSy4AWUwuAAAAAAAAAAAAAAAAAAAAAAA2JgAALRwAIHZsV/uQiHr/cGZR/peQ
        if+RioH/kouC/5KLgv+Si4L/kouC/5KLgv+Si4L/kouD/5CJf/+EfG7/cmhU/2peQ/9yZ0//i4J2/2RY
        Pv92bFb7joV3/0o7GWlIORYAWUwvBFlMLgAAAAAAAAAAAAAAAAAAAAAAAAAAADYmAAAtHAAgdmxX+5CI
        ev9wZlH+l5CJ/5GKgf+Si4L/kouC/5KLgv+Si4L/kouC/5KLgv+TjIP/i4R4/3JnVP9kWDz/4N7X/9fU
        zP9WSSv/aFxE/4F4ZfuKgnL/STsYaEg6FwBZTC4EAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANiYAAC0c
        ACB2bFf7kIh6/3BmUf6XkIn/kYqB/5KLgv+Si4L/kouC/5KLgv+Si4L/kouC/5KLgf9yaFX/ZFg8/9vY
        0P/39/X/gnlh/3xzY/+FfXD/fHJf+4uDc/9KOxloSDoXAFlMLgQAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAA2JgAALRwAIHZsV/uQiHr/cGZR/peQif+RioH/kouC/5KLgv+Si4L/kouC/5KKgf+Vjob/gHdp/2pe
        RP/e29X/+Pj2/31zW/9wZlP/nJaQ/392Zv99c1/7i4Nz/0o7GWhIOhcAWUwuBAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAADYmAAAtHAAgdmxX+5CIev9wZlH+l5CJ/5GKgf+Si4L/kouC/5KLgv+Si4L/kYqB/5aQ
        iP99dGT/f3Vd/+no4v9+dFz/cWdV/5mTjP+Vjob/f3dn/31zYPuLg3P/SjsZaEg6FwBZTC4EAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAANiYAAC0cACB2bFf7kIh6/3BmUf6XkIn/kYqB/5KLgv+Si4L/kouC/5KL
        gv+RioH/lY6G/3VrWP9iVjv/aV5G/3lvXv+YkYr/kImA/5aPh/9/d2f/fXNg+4uDc/9KOxloSDoXAFlM
        LgQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA2JgAALRwAIHZsV/uQiHr/cGZR/peQif+RioH/kouC/5KL
        gv+Si4L/kouC/5KLgv+TjIP/f3Zm/5CJf/+UjYb/lo+H/5GKgf+RioH/lo+I/393Z/99c2D7i4Nz/0o7
        GWhIOhcAWUwuBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADYmAAAtHAAgdmxX+5CIev9wZlH+l5CJ/5GK
        gf+Si4L/kouC/5KLgv+Si4L/kouC/5KLgv+Vj4f/k4yD/5KLgv+RioH/kouC/5GKgf+Wj4f/f3dn/31z
        YPuLg3P/SjsZaEg6FwBZTC4EAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANiYAAC0cACB2bFf7kIh6/3Bm
        Uf6XkIn/kYqB/5KLgv+Si4L/kouC/5KLgv+Si4L/kouC/5GKgf+Si4L/kouC/5KLgv+Si4L/kYqB/5aP
        h/9/d2f/fXNg+4uDc/9KOxloSDoXAFlMLgQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA2JgAALRwAIHZs
        V/uRiXv/cWdS/peRiv+Si4H/k4yD/5OMg/+TjIP/k4yD/5OMg/+TjIP/k4yD/5OMg/+TjIP/k4yD/5OM
        g/+Si4L/lpCI/4B3aP99dGD7i4Nz/0o7GWhIOhcAWUwuBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADYm
        AAAsGwAgd2xX+4+Hef9tYkz+lY+H/4+Ifv+QiX//kIl//5CJf/+QiX//kIl//5CIf/+QiX//kImA/5CJ
        f/+QiX//kIl//5CIf/+UjYX/fXRj/3pwXPuLg3T/STsYaEg6FwBZTC4EAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAANiYAADEgACBzaFL7oZqR/2peRf5rYEj/a2BI/2tgSP9rYEj/a2BI/2tgSP9rYEj/bmNM/2xh
        Sf9rYEj/a2BI/2tgSP9rYEj/a2BI/2xhSv9lWT//kop8+4qBcv9KPBloSDoXAFlMLgQAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAA3JwAANSUAIHBmTvusp6H/pZ+Y/qKbkv+inJP/opyT/6Kck/+inJP/opyT/6We
        lv+VjoT/oZqS/6Odlf+inJP/opyT/6Kck/+inJP/opuT/6OclP+wq6b7hn1s/0w+HWhIOhcAWUwuBAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAADYmAAA0JAAgcWdQ+6umoP+oopv+qaSe/6mknf+ppJ3/qaSd/6ii
        nP+uqaT/jYV3/29iP/9+dF7/q6ag/6mjnf+po53/qaSd/6mknf+ppJ3/qKKb/66ppPuHfm3/TD4caEg5
        FgBZTC4EAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPzALAD4vCSBrX0f7lo+C/5OLff6Ti37/k4t+/5OL
        fv+Ti37/kop9/5iRhP9sYUr/yLuI/31xUP+MhHf/lI1//5OLfv+Ti37/k4t+/5OLfv+Sin3/mJGF+3tx
        XP9QQiFoTT4dAFlMLgQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABENBEAQjMPIGhcQ/uMhHT/ioJx/oqC
        cf+KgnH/ioJx/4qCcf+JgXD/jod3/2thSf+om2z/dWlJ/4Z+bv+Lg3L/ioJx/4qCcf+KgnH/ioJx/4mB
        cP+Oh3f7dWtV/1FDI2lOQCAAWUwuBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEIzDgBBMQ0hal5F+ZKK
        fP2Oh3f7j4d4+4+HePuPh3j7j4d4+4+HePuQiXr7h39u+2leRPt9c1/7kYp7+46Hd/uPh3j7j4d4+4+H
        ePuPh3j7joZ3+5SMfvd5b1n/UEMiak4/HgBZTC4EAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARTYTAEQ1
        ERRiVTrugXdk/4J5Zv6BeGb/gnlm/4J5Zv+CeWb/gnlm/4F4Zf+Demf/hXxq/4R7af+BeGX/gnlm/4J5
        Zv+CeWb/gnlm/4J5Zv+BeGX/hHxq/GxgSP9RQyNVT0EhAFlMLgQAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AABURicCU0UmAFZJKk9YSy2sWU0vp1lMLqdZTC6oWUwuqFlMLqhZTC6oWUwuqFlMLqhYSy2oWEstqFlM
        LqhZTC6oWUwuqFlMLqhZTC6oWUwuqFlMLqZZTC6tVkkqel5SNgNdUTQAWUwuAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAFlMLgBZTC4AWUwuAFlMLgBZTC4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWUwuAFlMLgBZTC4AWUwuAVlMLgBZTC4AAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAl//8wkAAAKWAAADCgAAAgYAAAAKAAAAEgAAACYAAABKAAAAlgAAAS4AA
        AJeAAACvgAAAn4AAAL+AAAC/gAAAv4AAAL+AAAC/gAAAv4AAAL+AAAC/gAAAv4AAAL+AAAC/gAAAv4AA
        AL+AAAC/gAAAv4AAAL+AAAC/QAAAv5f//L8=
</value>
  </data>
</root>